{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","props","_this","Object","_Users_karan_karan_nanonets_github_io_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_karan_karan_nanonets_github_io_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_karan_karan_nanonets_github_io_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","input","reverse","individuals","testCases","h","e","l","o","handleInput","bind","_Users_karan_karan_nanonets_github_io_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","handleSubmit","event","style","border","setState","target","value","diction","i","length","toUpperCase","toLowerCase","split","word","Buffer","from","toString","r","ind","unshift","react__WEBPACK_IMPORTED_MODULE_6___default","className","htmlFor","id","type","onChange","placeholder","Component"],"mappings":"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","file":"static/js/main.9645d16b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      reverse: \"\",\n      individuals: {},\n      testCases: [\n        {\n          \"input\": \"hello\",\n          \"reverse\": \"olleh\",\n          \"individuals\": {\n          \"h\": 1,\n          \"e\": 1,\n          \"l\": 2,\n          \"o\": 1\n          }\n          }\n      ]\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.handleClear = this.handleClear.bind(this);\n  }\n  handleInput(event) {\n    document.getElementById(\"myDiv\").style.border = \"thin solid #0000FF\"\n    this.setState({\n      input: event.target.value\n    })\n    var diction = {}\n    for (var i = 0; i < event.target.value.length; ++i) {\n      if (event.target.value[i].toUpperCase() === event.target.value[i].toLowerCase()) {\n        continue;\n      }\n      if (!diction[event.target.value[i]]) {\n        diction[event.target.value[i]] = 1;\n      }\n      else {\n        diction[event.target.value[i]]++;\n      }\n    }\n    this.setState({\n      individuals: diction\n    })\n    var splitInput = event.target.value.split(\"\");\n    var rev = splitInput.reverse();\n    var word = \"Basic \" + Buffer.from(event.target.value + ':').toString('base64')\n    \n    if (event.target.value.length == 32) {\n    this.setState({\n      reverse: word\n    })}\n\n    if (event.target.value.length == 0) {\n      this.setState({\n        reverse: ''\n      })}\n\n    if (event.target.value.length != 32 && event.target.value.length != 0) {\n        this.setState({\n          reverse: 'Wrong Key'\n        })}\n\n  }\n\n  handleSubmit(event) {\n    let i = this.state.input;\n    let r = this.state.reverse;\n    let ind = this.state.individuals;\n    this.state.testCases.unshift({input: i, reverse: r, individuals: ind})\n    this.setState({\n      input: \"\",\n      reverse: \"\",\n      individuals: {}\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Nanonets RapidApi Keygen</h1>\n        <hr></hr>\n        <br></br>\n        <label htmlFor=\"input\"><b>Enter Nanonets API Key :</b></label>\n        <br></br>\n        <input id=\"input\" type=\"text\" value = {this.state.input} onChange={this.handleInput} placeholder=\"Enter API Key!\"/>\n        \n        <p><b>Nanonets RapidApi Key:</b> </p>\n        \n        <div id=\"myDiv\">{this.state.reverse}</div>\n        \n        <script>\n        document.getElementById(\"myDiv\").style.border = \"thick solid #0000FF\"\n        </script>\n\n\n        \n        <p><b></b> </p>\n        <p>Caution : \n          </p>\n        \n          <ul>\n          <li>You now need to copy the full string including the word \"Basic \" as that is part of Nanonets RapidAPI Key.</li>\n          <li>Example of correct Nanonets RapidAPI Key format : \"Basic AbCdEfGhIjKlMnopqRSTUUVVWWxxxyyyzzzzzzaabbcc\"</li>\n          </ul>\n        \n        \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//<button onClick={this.handleClear}>Clear all entries!</button> <p><b>Nanonets RapidApi Key:</b> {this.state.reverse}</p>"],"sourceRoot":""}